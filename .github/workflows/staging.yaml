name: Staging

on:
  pull_request:
    branches:
      - staging
    types:
      - opened
      - synchronize
      - reopened

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  build:
    name: build-staging
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean test

      - name: Extract project version from pom.xml
        run: echo "PROJECT_VERSION=$(mvn help:evaluate \"-Dexpression=project.version\" -q -DforceStdout)" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/v6test:staging${{ env.PROJECT_VERSION }},
            ${{ secrets.DOCKERHUB_USERNAME }}/v6test:staginglatest

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::881990811866:role/v6test-github
          role-session-name: samplerolesession
          aws-region: "us-east-1"

      - name: Trigger AWS Systems Manager Run Command
        id: send-command
        run: |
          command_id=$(aws ssm send-command \
            --document-name "Github-staging-update-EC2" \
            --targets '[{"Key":"tag:env","Values":["staging"]}]' \
            --timeout-seconds 600 \
            --max-concurrency "50" \
            --max-errors "0" \
            --region "us-east-1" \
            --query "Command.CommandId" \
            --output text)
          echo "::set-output name=command_id::$command_id"

      - name: Wait for Command Execution to Complete
        run: |
          command_id=${{ steps.send-command.outputs.command_id }}
          status="Pending"
          while [[ $status == "Pending" || $status == "InProgress" || $status == "Delayed" ]]; do
            echo "Waiting for command to complete..."
            sleep 10
            status=$(aws ssm list-command-invocations \
              --command-id $command_id \
              --details \
              --query "CommandInvocations[*].Status" \
              --output text \
              --region "us-east-1")
          done
          if [[ $(echo $status | grep -o "Success" | wc -l) -eq $(echo $status | wc -w) ]]; then
            echo "Command completed successfully."
          else
            echo "Command did not complete successfully. Status: $status"
            exit 1
          fi